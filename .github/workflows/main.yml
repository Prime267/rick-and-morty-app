name: SRE App CI/CD Pipeline

on:
  # Run on pushes to the main branch
  push:
    branches:
      - main
      - master
  # Also run on Pull Requests targeting the main branch
  pull_request:
    branches:
      - main
      - master

jobs:
  # --- JOB 1: LINT & TEST ---
  # This job runs linters and automated tests.
  # It uses 'requirements-dev.txt' to get ruff, pytest, etc.
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest # Use a standard Linux runner

    steps:
      - name: 1. Check out repository code
        uses: actions/checkout@v4

      - name: 2. Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' # Cache dependencies to speed up future runs

      - name: 3. Install all dependencies
        # Install from 'requirements-dev.txt' to get pytest, ruff, httpx, etc.
        run: pip install -r requirements-dev.txt

      - name: 4. Run Linter (Ruff)
        # SRE Practice: Fail fast if code quality standards are not met.
        run: ruff check app/ tests/

      # --- NEW: SPLIT TEST STEPS ---
      - name: 5. Run Unit Tests
        # SRE Practice: Fail fast on isolated logic errors (mocks are used)
        run: python -m pytest -m unit

      - name: 6. Run Integration Tests
        # SRE Practice: Gate on components working together (e.g., API + Test DB)
        run: python -m pytest -m integration

  # --- JOB 2: BUILD & PUSH DOCKER IMAGE ---
  # This job builds the optimized Docker image and pushes it to Docker Hub.
  # It ONLY runs if 'lint-test' succeeded AND this is a push to 'main'.
  build-push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    
    # SRE Gating:
    # 1. 'needs: lint-test' ensures this job only runs if *all* previous tests passed.
    # 2. 'if' condition ensures we only push images on a merge/push to main,
    #    not on every pull request commit.
    needs: lint-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: 1. Check out repository code
        uses: actions/checkout@v4

      - name: 2. Set up QEMU (for multi-platform builds, good practice)
        uses: docker/setup-qemu-action@v3

      - name: 3. Set up Docker Buildx (modern builder)
        uses: docker/setup-buildx-action@v3

      - name: 4. Log in to Docker Hub
        # Uses the secrets you created in GitHub repository settings
        uses: docker/login-action@v3
        with:
          username: \${{ secrets.DOCKER_USER }}
          password: \${{ secrets.DOCKER_TOKEN }} # Use the Access Token here

      - name: 5. Build and push image
        uses: docker/build-push-action@v6
        with:
          context: . # Use the root directory as context
          file: ./Dockerfile # Specify the root Dockerfile
          push: true # Push the image to the registry
          tags: |
            # Tag with 'latest' and also with the unique Git SHA
            # Use lowercase for your Docker Hub username/repo name
            \${{ secrets.DOCKER_USER }}/rick-morty-sre-app:latest
            \${{ secrets.DOCKER_USER }}/rick-morty-sre-app:\${{ github.sha }}
          platforms: linux/amd64 # Specify platform for compatibility
